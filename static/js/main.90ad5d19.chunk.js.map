{"version":3,"sources":["components/Header.js","components/WeatherInfo.js","App.js","index.js"],"names":["Header","props","className","FormControl","component","FormGroup","row","FormControlLabel","value","control","Switch","checked","isImperial","color","onChange","switchUnits","label","labelPlacement","WeatherInfo","str","data","cityName","country","temp","unitText","feelsLike","src","icon","alt","description","charAt","toUpperCase","slice","App","fetchData","url","state","city","process","weatherData","countryData","fetch","then","response","json","name","Math","round","parseFloat","main","sys","weather","feels_like","setState","handleChange","event","target","handleClick","length","componentDidMount","prevState","convertUnits","cToF","celcius","fToC","fahrenheit","componentDidUpdate","prevProps","this","type","placeholder","Button","variant","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90ad5d19.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Switch,\n  FormGroup,\n  FormControl,\n  FormControlLabel,\n} from \"@material-ui/core\";\n\nfunction Header(props) {\n  return (\n    <header>\n      <h1 className=\"logo\">Weather Check</h1>\n      <div className=\"unit-change\">\n        <FormControl component=\"fieldset\">\n          <FormGroup row>\n            <FormControlLabel\n              value=\"F\"\n              control={\n                <Switch\n                  checked={props.isImperial}\n                  color=\"default\"\n                  onChange={props.switchUnits}\n                />\n              }\n              label=\"째F\"\n              labelPlacement=\"end\"\n            />\n          </FormGroup>\n        </FormControl>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction WeatherInfo(props) {\n  const data = props.data;\n\n  function capitalize(str) {\n    const firstChar = str.charAt(0);\n    return firstChar.toUpperCase() + str.slice(1);\n  }\n\n  return (\n    <div className=\"weather-info-container\">\n      <div className=\"location\">\n        <p className=\"city\">{data.cityName}</p>\n        <p className=\"country\">{props.country}</p>\n      </div>\n      <div className=\"stat-container\">\n        <div className=\"temp\">\n          <p className=\"temp-stat\">\n            {data.temp}\n            {props.unitText}\n          </p>\n          <p className=\"feels-like\">\n            Feels like: {data.feelsLike}\n            {props.unitText}\n          </p>\n        </div>\n        <div className=\"image\">\n          <img\n            src={\n              data\n                ? `http://openweathermap.org/img/wn/${data.icon}@2x.png`\n                : null\n            }\n            alt=\"weather icon\"\n            className=\"weather-icon\"\n          />\n          <p className=\"description\">\n            {data ? capitalize(data.description) : null}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherInfo;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport WeatherInfo from \"./components/WeatherInfo\";\nimport { Button } from \"@material-ui/core\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: \"London\",\n      country: \"\",\n      weatherData: \"\",\n      isImperial: false,\n      unitText: \"째C\",\n    };\n  }\n\n  fetchData = () => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?units=${\n      this.state.isImperial ? \"imperial\" : \"metric\"\n    }&q=${this.state.city}&appid=${API_KEY}`;\n    let weatherData = {};\n    let countryData = \"\";\n    let city = \"\";\n\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((response) => {\n        weatherData = {\n          cityName: response.name,\n          temp: Math.round(parseFloat(response.main.temp)),\n          country: response.sys.country,\n          description: response.weather[0].description,\n          icon: response.weather[0].icon,\n          feelsLike: Math.round(parseFloat(response.main.feels_like)),\n        };\n        city = response.name;\n      })\n      .then(() => {\n        fetch(`https://restcountries.eu/rest/v2/alpha/${weatherData.country}`)\n          .then((response) => {\n            return response.json();\n          })\n          .then((response) => {\n            countryData = response;\n            this.setState({\n              weatherData: weatherData,\n              city: city,\n              country: countryData.name,\n            });\n          });\n      });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.city.length > 0) {\n      this.fetchData();\n    }\n  };\n\n  componentDidMount = () => {\n    this.fetchData();\n  };\n\n  switchUnits = () => {\n    this.setState((prevState) => {\n      return {\n        isImperial: !prevState.isImperial,\n      };\n    });\n  };\n\n  convertUnits = (isImperial) => {\n    function cToF(temp) {\n      const celcius = parseFloat(temp);\n      const fahrenheit = Math.round(celcius * 1.8 + 32);\n      return fahrenheit;\n    }\n\n    function fToC(temp) {\n      const fahrenheit = parseFloat(temp);\n      const celcius = Math.round((fahrenheit - 32) / 1.8);\n      return celcius;\n    }\n\n    if (isImperial) {\n      const temp = cToF(this.state.weatherData.temp);\n      const feelsLike = cToF(this.state.weatherData.feelsLike);\n\n      this.setState((prevState) => {\n        return {\n          weatherData: {\n            ...prevState.weatherData,\n            temp: temp,\n            feelsLike: feelsLike,\n          },\n          unitText: \"째F\",\n        };\n      });\n    } else {\n      const temp = fToC(this.state.weatherData.temp);\n      const feelsLike = fToC(this.state.weatherData.feelsLike);\n\n      this.setState((prevState) => {\n        return {\n          weatherData: {\n            ...prevState.weatherData,\n            temp: temp,\n            feelsLike: feelsLike,\n          },\n          unitText: \"째C\",\n        };\n      });\n    }\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.isImperial !== this.state.isImperial) {\n      this.convertUnits(this.state.isImperial);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          switchUnits={this.switchUnits}\n          isImperial={this.state.isImperial}\n        />\n        <div className=\"container\">\n          <div className=\"search-div\">\n            <input\n              className=\"city-input\"\n              type=\"text\"\n              name=\"city\"\n              placeholder=\"Name of City\"\n              onChange={this.handleChange}\n              value={this.state.city}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClick}\n            >\n              Search\n            </Button>\n          </div>\n          <WeatherInfo\n            data={this.state.weatherData}\n            country={this.state.country}\n            city={this.state.city}\n            unitText={this.state.unitText}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}